---
title: Man O' War
markdown2extras: wiki-tables, code-friendly
apisections:
---

# Man O' War

A.K.A. the Portuguese man o' war is a siphonophore (colonial organism) that
resembles a jellyfish.  The tentacles cause painful stings for humans and are
used to stun prey.

# Introduction

Man O' War is the framework for generating and displaying dashboards of graphs
for fun, profit, and operational goodness!  This repository contains several
component:

1. Code and marlin job definitions for processing logs.
2. Browser app for displaying dashboards.
3. Server for serving up ^^ and for generating presigned URLs.

# Getting Graphs for Your Service

First, verify that your service logs are emitting "audit" records.  As a first
step in the log crunching process, the marlin job will filter out any messages
that don't contain `'audit': true`.  Once you have a sample record, you can
identify fields that can be used to compute metrics.

Metrics can be calculated over any field that has as numeric value.  For
example, in the following structure the `latency`, `objectSize`, and
`res.statusCode` can have statistics computed for them:

    {
      "audit": true,
      "method": "GET",
      "url": "/nate/stor/a.txt",
      "res": {
        "statusCode": 200
      },
      "latency": 6,
      "objectSize": 2046
    }

No, it doesn't make sense to compute statistics for the statusCode, but it is
possible.  Fields for aggregation are defined in:

    etc/config.json

The format of that file is:

    {
      "[service name]": [ "[field to aggregate]", ... ],
      ...
    }

Fields for aggregation are in the following format:

   `[label_field:]aggregation_field`

The label field is optional and is used to find specific fields to use as
labels.  The aggregation field is used to gather statistics.  Either field can
use a '.' to follow a field into a structure.  For example, `res.statusCode`
would refer to the `statusCode` field in the `res` object.  Using the example
above, here are some aggregations that can be done:

1. `latency` : Compute statistics for all values found in a `latency` field.
2. `res.statusCode:latency` : For each status code, compute latency statistics.
3. `method:objectSize` : For each method, compute statistics on object sizes.

The `service name` is used to find logs for the marlin jobs.  The Man O' War
cron will search for all logs under the following path:

    /poseidon/stor/logs/[service name]/[year]/[month]/[day]/[hour]

For debugging purposes you can see what logs were used for generating graph
data by looking under:

    /poseidon/stor/graphs/processed/[[service name]/[year]/[month]/[day]/[hour]/job_info.json

So after seeing that your service is:

1. Publishing logs with audit fields to `/poseidon/stor/logs/[your service]/...`
2. Editing `manowar.git/etc/config.json` to add your service and aggregation
   fields and submitting.

You're done.  Now wait for your service to produce metrics:

   `$ mfind /poseidon/stor/graphs/data/[your service]`

Then pull up the manowar page in a browser and search for your service.  The
server is hosted on on the ops zone in Manta on port 80.

# Backfilling graphs for your service

If you already have logs uploaded and need to backfill or force a job to rerun:

1. Log into the ops zone
2. `/opt/smartdc/manowar/bin/kick_off_log_processing.js -p [hour path]`

Where `[hour path]` is of the form:

    /[year]/[month]/[day]/[hour]

Use the `-f` flag to force a job rerun.  For example:

    /opt/smartdc/manowar/bin/kick_off_log_processing.js -p /2012/11/05/10 -f

# Design

Man O' War requires services and processes to generate logs with `audit` fields.
For example this is a sample request from Muskie:

<code>
{
  "name": "audit",
  "hostname": "c8aa9a6d-d4dc-47ed-b19a-46572dda7299",
  "pid": 55838,
  "audit": true,
  "level": 30,
  "remoteAddress": "10.99.99.198",
  "remotePort": 50760,
  "req": {
    "method": "GET",
    "url": "/nate/stor/a.txt",
    "headers": {
      "accept": "application/x-json-stream",
      "date": "Tue, 13 Nov 2012 00:52:36 GMT",
      "x-request-id": "5ffc525e-532f-4024-86b8-33ffa4b5fe7f",
      "authorization": "Signature ...",
      "user-agent": "restify/1.0 (ia32-solaris; v8/3.11.10.19; OpenSSL/1.0.0f) node/0.8.8",
      "accept-version": "~1.0",
      "host": "10.99.99.198",
      "connection": "keep-alive",
      "x-forwarded-for": "10.99.99.254"
    },
    "httpVersion": "1.1",
    "trailers": {},
    "owner": "ec9b0b88-0118-11e2-a85b-0ff8adc7a466"
  },
  "res": {
    "statusCode": 200,
    "headers": {
      "last-modified": "Tue, 13 Nov 2012 00:41:24 GMT",
      "content-type": "application/x-json-stream; type=directory",
      "trailer": "x-stream-error",
      "date": "Tue, 13 Nov 2012 00:52:36 GMT",
      "server": "Manta",
      "x-request-id": "5ffc525e-532f-4024-86b8-33ffa4b5fe7f",
      "x-response-time": 6,
      "x-server-name": "c8aa9a6d-d4dc-47ed-b19a-46572dda7299"
    },
    "trailer": "x-stream-error: false\r\n"
  },
  "err": false,
  "latency": 6,
  "_audit": true,
  "msg": "handled: 200",
  "time": "2012-11-13T00:52:36.994Z",
  "v": 0
}
</code>

These logs are uploaded to manta under:

    /poseidon/stor/logs/[service]/[year]/[month]/[day]/[server].log.gz

Crons kicked off from the cron zone will find logs and set off marlin jobs to
aggregate/transform them over 1 minute periods.  The results of the
transformations are uploaded to:

    /poseidon/stor/graphs/data/[service]/[year]/[month]/[day]/[hour]/60.data

Other aggregations could be produced and put in appropriate locations.  Each of
these aggregate files are in the format:

<code>
{
  "period": 60,
  "start": "2012-12-04T22:00:00.000Z",
  "end": "2012-12-04T22:59:00.000Z",
  "metrics": {
    "latency": {
      "avg": [ 123, ... ]
      "n": [ ... ],
      ...
    },
    "statusCode.200:latency": {
      "avg": [ ... ],
      "n": [ ... ],
      ...
    },
    ...
  }
}
</code>

Each `metrics` block contains blocks of stats that can be plotted.  These files
are directly consumed by the dashboarding webapp.  Since we don't currently have
a mechanism for getting transient credentials directly from a browser (a la OAuth
or similar), the webapp first fetches a presigned url from the Man O' War server
running in the ops zone, then makes a CORS request using that presigned URL to
fetch the data.  It then uses the data to construct a graph.

# See Also
* [MANTA-507](https://devhub.joyent.com/jira/browse/MANTA-507): Jira item.
